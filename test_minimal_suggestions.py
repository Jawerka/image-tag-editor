#!/usr/bin/env python3
"""–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–æ–≤—ã–º CSV."""

import sys
from pathlib import Path
import pandas as pd

# Add the current directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

def test_minimal_suggestions():
    """–¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö."""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    from main import TagAutoCompleteApp
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app = TagAutoCompleteApp.__new__(TagAutoCompleteApp)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    app.tag_frequencies = {}
    app.all_tags = []
    app.all_tags_lower = []
    app.tag_cache = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π CSV
    test_csv = Path('test_minimal.csv')
    if not test_csv.exists():
        print("‚ùå –§–∞–π–ª test_minimal.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
        
    df = pd.read_csv(test_csv, header=None, dtype=str, encoding='utf-8', 
                     on_bad_lines='skip', quoting=1).fillna("")
    
    print(f"–î–∞–Ω–Ω—ã–µ –∏–∑ CSV:")
    for i, row in df.iterrows():
        print(f"  {i}: {list(row)}")
    
    app.all_tags, app.tag_frequencies = app.process_tags_with_frequency(df)
    app.all_tags_lower = [t.lower() for t in app.all_tags]
    
    print(f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏:")
    for i, tag in enumerate(app.all_tags):
        freq = app.tag_frequencies.get(tag, 0)
        print(f"  {i}: {tag} (freq: {freq})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ('s', 'safe'),
        ('oc', 'oc'),
        ('fe', 'female'),
        ('m', 'mare'),
    ]
    
    for query, expected in test_cases:
        suggestions = app.find_suggestions(query)
        print(f"\n–ó–∞–ø—Ä–æ—Å '{query}' -> {suggestions}")
        if suggestions and suggestions[0] == expected:
            print(f"  ‚úì –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç '{suggestions[0]}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—é '{expected}'")
        else:
            print(f"  ‚ùå –û–∂–∏–¥–∞–ª—Å—è '{expected}', –ø–æ–ª—É—á–µ–Ω '{suggestions[0] if suggestions else 'None'}'")
            return False
    
    return True

if __name__ == "__main__":
    success = test_minimal_suggestions()
    if success:
        print("\nüéâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")
    sys.exit(0 if success else 1)
