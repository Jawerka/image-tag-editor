#!/usr/bin/env python3
"""–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å —á–∏—Å—Ç—ã–º CSV."""

import sys
from pathlib import Path
import pandas as pd

# Add the current directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

def test_clean_suggestions():
    """–¢–µ—Å—Ç —Å —á–∏—Å—Ç—ã–º CSV –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫."""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å —á–∏—Å—Ç—ã–º CSV...")
    
    from main import TagAutoCompleteApp
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app = TagAutoCompleteApp.__new__(TagAutoCompleteApp)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    app.tag_frequencies = {}
    app.all_tags = []
    app.all_tags_lower = []
    app.tag_cache = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π CSV
    test_csv = Path('test_clean.csv')
    if not test_csv.exists():
        print("‚ùå –§–∞–π–ª test_clean.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
        
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
    df = app._manual_csv_parse(test_csv)
    
    print(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —á–∏—Å—Ç–æ–≥–æ CSV:")
    for i, row in df.iterrows():
        print(f"  {i}: {list(row)}")
    
    app.all_tags, app.tag_frequencies = app.process_tags_with_frequency(df)
    app.all_tags_lower = [t.lower() for t in app.all_tags]
    
    print(f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ (–≤—Å–µ–≥–æ {len(app.all_tags)}):")
    for i, tag in enumerate(app.all_tags):
        freq = app.tag_frequencies.get(tag, 0)
        print(f"  {i}: '{tag}' (freq: {freq})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞ 'oc'
    if 'oc' in app.tag_frequencies:
        print(f"\n‚úì –¢–µ–≥ 'oc' –Ω–∞–π–¥–µ–Ω —Å —á–∞—Å—Ç–æ—Ç–æ–π: {app.tag_frequencies['oc']}")
        oc_position = app.all_tags.index('oc')
        print(f"‚úì –ü–æ–∑–∏—Ü–∏—è 'oc' –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ: {oc_position}")
    else:
        print(f"\n‚ùå –¢–µ–≥ 'oc' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ('s', 'safe', '–¥–ª—è "s" –ø–µ—Ä–≤—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "safe"'),
        ('oc', 'oc', '–¥–ª—è "oc" –ø–µ—Ä–≤—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ "oc"'),
        ('fe', 'female', '–¥–ª—è "fe" –ø–µ—Ä–≤—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "female"'),
        ('m', 'mare', '–¥–ª—è "m" –ø–µ—Ä–≤—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "mare"'),
    ]
    
    for query, expected, description in test_cases:
        suggestions = app.find_suggestions(query)
        print(f"\n–ó–∞–ø—Ä–æ—Å '{query}' -> {suggestions}")
        
        if suggestions:
            freqs = [(tag, app.tag_frequencies.get(tag, 0)) for tag in suggestions]
            print(f"  –° —á–∞—Å—Ç–æ—Ç–∞–º–∏: {freqs}")
            
            if suggestions[0] == expected:
                print(f"  ‚úì {description}")
            else:
                print(f"  ‚ùå {description} - –ø–æ–ª—É—á–µ–Ω '{suggestions[0]}'")
                return False
        else:
            print(f"  ‚ùå {description} - –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False
    
    return True

if __name__ == "__main__":
    success = test_clean_suggestions()
    if success:
        print("\nüéâ –¢–µ—Å—Ç —Å —á–∏—Å—Ç—ã–º CSV –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç —Å —á–∏—Å—Ç—ã–º CSV –ø—Ä–æ–≤–∞–ª–µ–Ω!")
    sys.exit(0 if success else 1)
