#!/usr/bin/env python3
"""–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ derpibooru."""

import sys
from pathlib import Path
from unittest.mock import Mock

# Add the current directory to Python path
sys.path.insert(0, str(Path(__file__).parent))

def test_real_suggestions():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ç–µ–≥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    from main import TagAutoCompleteApp
    import pandas as pd
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app = TagAutoCompleteApp.__new__(TagAutoCompleteApp)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    app.tag_frequencies = {}
    app.all_tags = []
    app.all_tags_lower = []
    app.tag_cache = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
    test_csv = Path('test_derpibooru.csv')
    if not test_csv.exists():
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª test_derpibooru.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
        
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    print("Using manual CSV parsing for reliability...")
    df = app._manual_csv_parse(test_csv)
    
    app.all_tags, app.tag_frequencies = app.process_tags_with_frequency(df)
    app.all_tags_lower = [t.lower() for t in app.all_tags]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ 'oc' –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if 'oc' in app.tag_frequencies:
        print(f"‚úì –¢–µ–≥ 'oc' –Ω–∞–π–¥–µ–Ω —Å —á–∞—Å—Ç–æ—Ç–æ–π: {app.tag_frequencies['oc']}")
        oc_position = app.all_tags.index('oc') if 'oc' in app.all_tags else -1
        print(f"‚úì –ü–æ–∑–∏—Ü–∏—è 'oc' –≤ —Å–ø–∏—Å–∫–µ: {oc_position}")
    else:
        print("‚ùå –¢–µ–≥ 'oc' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö!")
        return False
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(app.all_tags)} —Ç–µ–≥–æ–≤")
    print(f"–¢–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö: {[(tag, app.tag_frequencies[tag]) for tag in app.all_tags[:5]]}")
    
    # –¢–µ—Å—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–º–µ—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_cases = [
        # query, expected_first, description
        ('s', 'safe', '–¥–ª—è "s" –ø–µ—Ä–≤—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "safe" (—Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π)'),
        ('oc', 'oc', '–¥–ª—è "oc" –ø–µ—Ä–≤—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ "oc"'),
        ('ma', 'mare', '–¥–ª—è "ma" –ø–µ—Ä–≤—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "mare" (–µ—Å–ª–∏ –æ–Ω –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Å—Ä–µ–¥–∏ ma*)'),
        ('fe', 'female', '–¥–ª—è "fe" –ø–µ—Ä–≤—ã–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "female" (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "fe")'),
        ('cola', None, '–¥–ª—è "cola" –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä—è–º—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–Ω–µ—Ç –æ—Ä—Ñ–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)'),
    ]
    
    for query, expected_first, description in test_cases:
        suggestions = app.find_suggestions(query)
        print(f"\n–ó–∞–ø—Ä–æ—Å '{query}':")
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {suggestions}")
        if suggestions:
            freqs = [(tag, app.tag_frequencies.get(tag, 0)) for tag in suggestions]
            print(f"  –° —á–∞—Å—Ç–æ—Ç–∞–º–∏: {freqs}")
        
        if expected_first:
            assert suggestions and suggestions[0] == expected_first, f"–û—à–∏–±–∫–∞: {description}"
            print(f"  ‚úì {description}")
        elif expected_first is None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–ª–∏ —á—Ç–æ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ—Ç–æ—á–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            print(f"  ‚úì {description}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    print(f"\n–¢–µ—Å—Ç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:")
    luftkrieg_suggestions = app.find_suggestions('parent:oc:luftkrieg')
    print(f"  –ó–∞–ø—Ä–æ—Å 'parent:oc:luftkrieg': {luftkrieg_suggestions}")
    
    # –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å parent:soarin –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø–æ–ø—É–ª—è—Ä–Ω–µ–µ
    if luftkrieg_suggestions:
        assert 'parent:soarin' not in luftkrieg_suggestions, "–ù–µ –¥–æ–ª–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é!"
        if 'parent:oc:luftkrieg' in luftkrieg_suggestions:
            print(f"  ‚úì –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Ç")
    else:
        print(f"  ‚úì –ù–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ - –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        
    return True

def main():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç."""
    try:
        success = test_real_suggestions()
        if success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("\n–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ:")
            print("- –£—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤")
            print("- –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
            print("- –ù–µ –¥–µ–ª–∞–µ—Ç –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            print("- –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫ —Ä–µ–¥–∫–∏–º")
        return success
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
